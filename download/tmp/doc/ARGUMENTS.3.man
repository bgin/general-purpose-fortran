NAME
       ARGUMENTS(3f) -  collection of command line argument parsers
SYNOPSIS

   use M_kracken
   use M_getopt
   use M_getopt_long

DESCRIPTION

   The following command line argument parser modules are available:
     o M_kracken - parse command line options of Fortranprograms using Unix-like syntax
     o M_getopt - parse command line arguments. similar to those in standard C library.
     o M_getopt_long - parse command line options like Sun getopt_long, including the Sun CLIP specific

M_KRACKEN

   M_kracken(3f) is a module to parse command line options of Fortran programs using Unix-like syntax.
   The main differences in syntax are that negative values and multi-word values rarely needed quotes
   around them, and that the "unnamed" parameter commands first on the command line. It contains:

   BASE ROUTINES
   kracken      - crack command line options on Fortran programs, using "-KEYWORD VALUE" syntax
   retrev       - get keyword value as a string from a command's argument list

   CONVENIENCE ROUTINES FOR FETCHING VALUES
   dget         - given keyword fetch doubleprecision value from command argument
   iget         - given keyword fetch integer value from command argument
   lget         - given keyword fetch logical value from command arguments
   rget         - given keyword fetch real value from command argument
   sget         - given keyword fetch string value and length from command arguments
   dgets        - given keyword fetch doubleprecision array from command arguments
   igets        - given keyword fetch integer array from command arguments
   lgets        - given keyword fetch logical array from command argument
   rgets        - given keyword fetch real array from command arguments
   sgets        - given keyword fetch string value parsed on whitespace into an array

   AUXILIARY COMMAND FOR SETTING PROMPTS
   setprompts   - set explicit prompts for keywords in interactive mode

   AUXILIARY COMMANDS FOR USE IN BUILDING CLI
   (CLI) Command Line Interface routines can be used to read shell-like input and
   configuration files

   dissect      - convenient call to parse() - define defaults, then process
   parse        - parse user command and store tokens into Language Dictionary
   show         - dump dictionary entries
   store        - replace dictionary name's value (if allow=add add name if necessary)
