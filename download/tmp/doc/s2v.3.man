NAME
     s2v - [M_strings] function returns doubleprecision numeric value from a string

SYNOPSIS
   function s2v(string,[ierr])

    character(len=*)             :: string
    doubleprecision              :: s2v
    integer,intent(out),optional :: ierr

DESCRIPTION
      This function converts a string to a DOUBLEPRECISION numeric value.
      A value of zero (0) is returned on error.

      If an error occurs the program is stopped if the optional parameter
      IERR is not present. If IERR is non-zero an error occurred.

EXAMPLE

   program demo_s2v

    use M_strings, only: s2v
    implicit none
    character(len=8)              :: s=' 10.345 '
    integer                       :: i
    character(len=14),allocatable :: strings(:)
    doubleprecision               :: dv
    integer                       :: errnum

    ! different strings representing INTEGER, REAL, and DOUBLEPRECISION
    strings=[&
    &' 10.345       ',&
    &'+10           ',&
    &'    -3        ',&
    &'    -4.94e-2  ',&
    &'0.1           ',&
    &'12345.678910d0',&
    &'              ',& ! Note: will return zero without an error message
    &'1 2 1 2 1 . 0 ',& ! Note: spaces will be ignored
    &'WHAT?         ']  ! Note: error messages will appear, zero returned

    ! a numeric value is returned, so it can be used in numeric expression
    write(*,*) '1/2 value of string is ',s2v(s)/2.0d0
    write(*,*)
    write(*,*)' STRING            VALUE                    ERROR_NUMBER'
    do i=1,size(strings)
       ! Note: not a good idea to use s2v(3f) in a WRITE(3f) statement,
       ! as it does I/O when errors occur, so called on a separate line
       dv=s2v(strings(i),errnum)
       write(*,*) strings(i)//'=',dv,errnum
    enddo
    write(*,*)"That's all folks!"

    end program demo_s2v

   Expected output

    >1/2 value of string is    5.1725000000000003
    >
    > STRING            VALUE                    ERROR_NUMBER
    > 10.345       =   10.345000000000001                0
    >+10           =   10.000000000000000                0
    >    -3        =  -3.0000000000000000                0
    >    -4.94e-2  =  -4.9399999999999999E-002           0
    >0.1           =  0.10000000000000001                0
    >12345.678910d0=   12345.678910000001                0
    >              =   0.0000000000000000                0
    >1 2 1 2 1 . 0 =   12121.000000000000                0
    >*a2d* - cannot produce number from string [WHAT?]
    >*a2d* - [Bad value during floating point read]
    >WHAT?         =   0.0000000000000000             5010
    >That's all folks!
