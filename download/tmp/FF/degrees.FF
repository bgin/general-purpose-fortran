$DOCUMENT NULL

 This file is automatically compiled and tested by the master build script
 make.shell, unit test are results placed in the goodbad(1) database

    Specifically,  This  file  is  a  ufpp(1) file containing a Fortran program
    called degrees(1) and unit tests for the program after it is compiled

   o The ccall(1) command builds the program and places the executable
     in the platform-specific production area. ccall(1) automatically
     calls ufpp (and defines TESTPRG90)

         ccall degrees.FF

   o Note that the ufpp(1) $DOCUMENT directive is used to generate the
     routines for the -help and -version switches and to create the input
     files for txt2man(1) to create a manpage for the command.

   o To run the unit tests manually use

        ufpp -system -verbose -i degrees.FF -D UFPP_TEST
$DOCUMENT
$!==================================================================================================================================
$IF DEFINED(TESTPRG90) ! Place test program source here
$! this is converted into the help_usage subroutine by ufpp ...
$DOCUMENT HELP -file degrees.1.man
NAME
   degrees(1f) - [CONVERT] Convert between Fahrenheit and Celsius temperature values
   (LICENSE:PD)

SYNOPSIS
   degrees [value_unit ...] [ -C values] [ -F values] [ --help] [ --version]

DESCRIPTION

   value_unit  numeric values followed by either a C or F to specify a unit.
   -C values   Display the given Celsius values as both Celsius and
               Fahrenheit values
   -F values   Display the given Fahrenheit values as both Celsius and
               Fahrenheit values. If no values are given a small table of
               common temperatures is displayed.
   --help      display this help and exit
   --version   output version information and exit

   At the physically impossible-to-reach temperature of zero Kelvin,
   or minus 459.67 degrees Fahrenheit (minus 273.15 degrees Celsius),
   atoms would stop moving. As such, nothing can be colder than absolute
   zero on the Kelvin scale.

EXAMPLE

 Sample program runs:

   %degrees -C -40 0 37 100
    Celsius      Fahrenheit
     -40.00C      -40.00F
       0.00C       32.00F
      37.00C       98.60F
     100.00C      212.00F

   %degrees -F -459.67 32 98.60 212
    Fahrenheit   Celsius
    -459.67F     -273.15C
      32.00F        0.00C
      98.60F       37.00C
     212.00F      100.00C
AUTHOR
   John S. Urban
LICENSE
   Public Domain
$DOCUMENT END
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$! this is converted into the help_version subroutine by ufpp ...
$! To work with what(1), do not use ",>,\ characters in descriptions
$DOCUMENT VERSION
PRODUCT:        GPF (General Purpose Fortran) utilities and examples
PROGRAM:        degrees(1f)
DESCRIPTION:    convert multiple values between Celsius and Fahrenheit
VERSION:        1.0, 2016-04-09
AUTHOR:         John S. Urban
REPORTING BUGS: http://www.urbanjost.altervista.org/
HOME PAGE:      http://www.urbanjost.altervista.org/index.html
LICENSE:        Public Domain
$DOCUMENT END
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
program degrees
use M_kracken, only : kracken, rgets, lget, sget
use M_strings, only : upper, compact, replace, split, s2v
implicit none
$@(#) degrees(1f): convert multiple values between Celsius and Fahrenheit
real,allocatable              :: val(:)
integer                       :: i, isum=0, ivals, last
real                          :: sval
character(len=:),allocatable  :: values 
character(len=:),allocatable  :: values_split(:)
  call kracken('degrees','-F -C -K -help .F. -version .F.' )
  call help_usage(lget('degrees_help'))                                  ! display help information and stop  if true
  call help_version(lget('degrees_version'))                             ! display version information and stop if true
  isum=0                                                                 ! number of values found on -oo and -C and -F options

  values=sget('degrees_oo')            ! look for plain values with a unit suffix
  if(values.ne.'')then
     values=upper(compact(values))     ! reduce whitespace regions to single characters and convert to uppercase
     values=replace(values,' F','F')   ! remove space between values and suffix
     values=replace(values,' C','C')
     call split(values,values_split)   ! split into array of strings of form nnnn[CF]
     ivals=size(values_split)
     if(ivals.ne.0)then
        write(*,'(a,t14,a)')'Celsius','Fahrenheit'
        isum=ivals
        do i=1,ivals
           last=len(trim(values_split(i)))              ! find suffix letter
           if(last.lt.2)then
              write(*,*)'*degrees* syntax error: numeric value and F or C suffix is required for '//trim(values_split(i))
              !!call help_usage(.true.)                                          ! display help information and stop
              stop 1
           endif
           sval=s2v(values_split(i)(:last-1))           ! convert numeric section to a number
           select case(values_split(i)(last:last))
           case ('F')
              write(*,'(f8.2,"C",t14,f8.2,"F")')(sval+40.0)*5.0/9.0 - 40.0,sval
           case ('C')
              write(*,'(f8.2,"C",t14,f8.2,"F")')sval,(sval+40.0)*9.0/5.0 - 40.0
           case default
              write(*,*)'*degrees* syntax error: F or C suffix is required for '//trim(values_split(i))
              !!call help_usage(.true.)                                          ! display help information and stop
              stop 2
           end select
        enddo
     endif
  endif
  val=rgets('degrees_C')                                              ! get any values specified on -C option

  if(size(val).gt.0)then                                              ! have something to print in C ==> F table
     isum=isum+size(val)
     write(*,'(a,t14,a)')'Celsius','Fahrenheit'
     write(*,'(f8.2,"C",t14,f8.2,"F")')(val(i),(val(i)+40.0)*9.0/5.0 - 40.0,i=1,size(val))    ! print the requested values
  endif

  val=rgets('degrees_F')                                                 ! check for values on -F

  if(size(val).gt.0)then
     isum=isum+size(val)
     write(*,'(a,t14,a)') 'Fahrenheit', 'Celsius'
     write(*,'(f8.2,"F",t14,f8.2,"C")')(val(i),(val(i)+40.0)*5.0/9.0 - 40.0,i=1,size(val))
  endif

  if(isum.eq.0)then                                                   ! if no values given on -C and -F switches show default table
    val=[ &
       &-459.67,                               &
       &-400.0, -300.0, -200.0, -150.0,-128.6, -125.0, &
       &-100.0,  -75.0,  -50.0,  -40.0, -30.0, &
       & -20.0,  -15.0,  -10.0,   -5.0,   0.0, &
       &   5.0,   10.0,   15.0,   20.0,  25.0, &
       &  30.0,   32.0,   35.0,   40.0,  45.0, &
       &  50.0,   55.0,   60.0,   65.0,  70.0, &
       &  75.0,   80.0,   85.0,   90.0,  95.0, &
       &  98.6,  100.0,  105.0,  110.0, 115.0, &
       & 120.0,  125.0,  130.0,  134.0, 135.0, &
       & 140.0,  145.0,  150.0,  160.0, 170.0, &
       & 180.0,  190.0,  200.0,  210.0, 212.0  ]
     write(*,'(a,t14,a)') 'Fahrenheit', 'Celsius'
     write(*,'(f8.2,"F",t14,f8.2,"C")')(val(i),(val(i)+40.0)*5.0/9.0 - 40.0,i=1,size(val))
  endif

end program degrees
$ENDIF
!-----------------------------------------------------------------------------------------------------------------------------------
$IF defined(UFPP_TEST)
   Beginning of tests of degrees(1)
  
   if command not in path exit
$SYSTEM inpath degrees
   Flag in database that testing has begun
$SYSTEM goodbad degrees start -section 1
   Make scratch directory at current location
$SYSTEM mkdir -p tmp/

   Create file of expected results
$SYSTEM degrees > tmp/_degrees_out.txt
$SYSTEM degrees -C 0 100 >> tmp/_degrees_out.txt
$SYSTEM degrees -F 32 212 >> tmp/_degrees_out.txt
$!==============================================================================
$OUTPUT tmp/_degrees_expected.txt
Fahrenheit   Celsius
 -459.67F     -273.15C
 -400.00F     -240.00C
 -300.00F     -184.44C
 -200.00F     -128.89C
 -150.00F     -101.11C
 -128.60F      -89.22C
 -125.00F      -87.22C
 -100.00F      -73.33C
  -75.00F      -59.44C
  -50.00F      -45.56C
  -40.00F      -40.00C
  -30.00F      -34.44C
  -20.00F      -28.89C
  -15.00F      -26.11C
  -10.00F      -23.33C
   -5.00F      -20.56C
    0.00F      -17.78C
    5.00F      -15.00C
   10.00F      -12.22C
   15.00F       -9.44C
   20.00F       -6.67C
   25.00F       -3.89C
   30.00F       -1.11C
   32.00F        0.00C
   35.00F        1.67C
   40.00F        4.44C
   45.00F        7.22C
   50.00F       10.00C
   55.00F       12.78C
   60.00F       15.56C
   65.00F       18.33C
   70.00F       21.11C
   75.00F       23.89C
   80.00F       26.67C
   85.00F       29.44C
   90.00F       32.22C
   95.00F       35.00C
   98.60F       37.00C
  100.00F       37.78C
  105.00F       40.56C
  110.00F       43.33C
  115.00F       46.11C
  120.00F       48.89C
  125.00F       51.67C
  130.00F       54.44C
  134.00F       56.67C
  135.00F       57.22C
  140.00F       60.00C
  145.00F       62.78C
  150.00F       65.56C
  160.00F       71.11C
  170.00F       76.67C
  180.00F       82.22C
  190.00F       87.78C
  200.00F       93.33C
  210.00F       98.89C
  212.00F      100.00C
Celsius      Fahrenheit
    0.00C       32.00F
  100.00C      212.00F
Fahrenheit   Celsius
   32.00F        0.00C
  212.00F      100.00C
$OUTPUT
$!==============================================================================
      Compare expected output with program output
$SYSTEM diff tmp/_degrees_out.txt tmp/_degrees_expected.txt
$SYSTEM goodbad degrees good -section 1
$SYSTEM rm -f tmp/_degrees_out.txt tmp/_degrees_expected.txt
$SYSTEM rmdir --ignore-fail-on-non-empty tmp
$!==============================================================================
$ENDIF
$!==============================================================================
