$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$IF DEFINED(TESTPRG90) ! Place test program source here
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$DOCUMENT HELP -file change.1.man
NAME
   change(1f) - [FILE EDIT] replace old fixed string with new fixed string in names of files

SYNOPSIS
   change c/old/new/ FILENAMES [-dryrun][-cmd COMMAND]| --version| --help

DESCRIPTION
   Given a change directive and a list of filenames replace all occurrences of
   the original string with the new string.

OPTIONS
   c/old/new/    change occurrences of old string to new string in filenames.
                 The first character after the c is the delimiter for the strings.
                 Spaces are not allowed in the expression.
   FILENAMES     names of files to rename
   -dryrun       write the commands to stdout instead of executing them
   -verbose      echo the commands to be executed
   -cmd COMMAND  change command from "mv" to specified command name
   --help        display this help and exit
   --version     output version information and exit

EXAMPLE
  Sample commands:

   # change all files with .f90 in their name to *.F90
   change c/.f90/.F90/  *.f90
   # copy all files with .f90 in their name to *.F90
   change c@.f90@.F90@  *.f90 -cmd cp

$DOCUMENT END
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$! this is converted into the help_version subroutine by ufpp ...
$! To work with what(1), do not use ",>,\ characters in the descriptions
$DOCUMENT VERSION
PRODUCT:        GPF (General Purpose Fortran) utilities and examples
PROGRAM:        change(1f)
DESCRIPTION:    rename files by changing old fixed string to new string
VERSION:        1.0, 2017-06-29
AUTHOR:         John S. Urban
$DOCUMENT END
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
program demo_change
use M_kracken, only : kracken, sgets, lget, IPvalue, sget
use M_strings, only : change
implicit none
character(len=*),parameter         :: ident="@(#) change(1f):rename files by changing old fixed string to new string"
character(len=IPvalue),allocatable :: names(:)
character(len=:),allocatable       :: directive
character(len=IPvalue)             :: newname
character(len=:),allocatable       :: cmd
character(len=:),allocatable       :: action
integer                            :: i, ierr
logical                            :: dryrun, verbose
integer                            :: cstat
character(len=256)                 :: sstat

   call kracken('change', &
   & ' -oo -help .F. -version .F. -dryrun .F. -cmd mv -verbose .F.') ! parse command line
   call help_usage(lget('change_help'))                                     ! display help information and stop if true
   call help_version(lget('change_version'))                                ! display version information and stop if true
   dryrun=lget('change_dryrun')
   verbose=lget('change_verbose')
   cmd=trim(sget('change_cmd'))

   names=sgets('change_oo')
   select case(size(names))
   case(1)
   case(2:)
      do i=2,size(names,dim=1)
         newname=names(i)
	 if(names(1)(1:1).eq.'/')then
	    directive='c'//names(1)
	 else
	    directive=names(1)
	 endif
         call change(newname,directive,ierr)                                 ! if ierr>0 it is the number of changes made to string
         if(ierr.gt.0)then
            action=cmd//' '//trim(names(i))//' '//newname
            if(dryrun.or.verbose)then
               write(*,'(a)') trim(action)
	    endif
	    if(.not.dryrun)then
               call execute_command_line(action,cmdstat=cstat,cmdmsg=sstat)
            endif
         endif
      enddo
   endselect
end program demo_change
$ENDIF
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$IF defined(UFPP_TEST)

   Beginning of unit tests for change(1f)

   if command not in path exit
$SYSTEM inpath change

   Flag in database that testing has begun

$SYSTEM goodbad change start -section 1

   Make scratch directory at current location

$SYSTEM mkdir -p tmp/

   execute command and build output file of expected results
$SYSTEM touch tmp/file1.c tmp/file2.c tmp/file3.c tmp/file4.c
$SYSTEM change c/.c/.cc/ tmp/*
$SYSTEM ls tmp/file* >tmp/_change_out.txt

   create file of expected results

$OUTPUT tmp/_change_expected.txt
tmp/file1.cc
tmp/file2.cc
tmp/file3.cc
tmp/file4.cc
$OUTPUT

      Compare expected output with program output

$SYSTEM diff tmp/_change_out.txt tmp/_change_expected.txt

      Assume if got here that tests were passed and so
      record success in the SQLite database maintained via
      the goodbad(1) command

$SYSTEM goodbad change good -section 1

      Clean up scratch files when successful

$SYSTEM rm -f tmp/_change_out.txt tmp/_change_expected.txt tmp/file[1-4].cc
$SYSTEM rmdir --ignore-fail-on-non-empty tmp

      End of unit tests

$ENDIF
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
