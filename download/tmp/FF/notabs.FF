$IFDEF TESTPRG90 ! ccall(1) defines TESTPRG90
$MESSAGE generating help_usage(3f)
!===================================================================================================================================
$DOCUMENT HELP -file notabs.1.man
NAME
       notabs(1f) - [FILE FILTER] convert tabs to spaces

SYNOPSIS
       notabs FILENAME(S)| --help| --version

DESCRIPTION
       Convert tabs in each FILE to spaces, writing to standard output.
       If no filename is specified standard input is read. Tab stops
       are assumed to be every eight (8) columns. Trailing spaces,
       carriage returns, and newlines are removed

OPTIONS
       FILENAMES   files to expand tab characters in.
       --help      display this help and exit
       --version   output version information and exit

EXAMPLES
       Sample commands:

        notabs < input.txt > output.txt
        notabs input.txt   > output.txt
$DOCUMENT END
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$MESSAGE generating help_version(3f)
$DOCUMENT VERSION
PRODUCT:        GPF (General Purpose Fortran) utilities and examples
PROGRAM:        notabs(1f)
DESCRIPTION:    convert tabs to spaces
VERSION:        1.0, 2015-12-20
AUTHOR:         John S. Urban
REPORTING BUGS: http://www.urbanjost.altervista.org/
HOME PAGE:      http://www.urbanjost.altervista.org/index.html
LICENSE:        Public Domain. This is free software: you are free to change and redistribute it.
                There is NO WARRANTY, to the extent permitted by law.
$DOCUMENT END
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$MESSAGE notabs(1) source being generated
!===================================================================================================================================
program test_notabs
use M_kracken, only: kracken, lget, rget, iget, sget
use M_strings, only: notabs, split
implicit none
character(len=*),parameter :: ident="@(#)notabs(1f):filter removes tabs and trailing white space from files up to 1024 chars wide"
character(len=1024)              :: in,out
integer                          :: ios          ! error flag from read
integer                          :: iout
integer                          :: i,ii
integer                          :: ierror=0
character(len=:),allocatable     :: array(:)     ! split name of filenames
!-----------------------------------------------------------------------------------------------------------------------------------
   call kracken('notabs','-help .F. -version .F. ',ierror) !  define command arguments, default values and crack command line
   call help_usage(lget('notabs_help'))                    ! check if -help was specified
   call help_version(lget('notabs_version'))               ! check if -version was specified
!-----------------------------------------------------------------------------------------------------------------------------------
   if(sget('notabs_oo').ne.'')then                         ! see if filenames were listed on the command line
      call split(sget('notabs_oo'),array)                  ! split the filenames into an array
   else                                                    ! default is to read from stdin, which the filename "-" designates
      array=['-']
   endif
!-----------------------------------------------------------------------------------------------------------------------------------
   ALLFILES: do i=1,size(array)                            ! loop through all the filenames
      if(array(i).eq.'-')then                              ! special filename designates stdin
         ii=5
      else                                                 ! open a regular file
         ii=20
         open(unit=ii,file=trim(array(i)),iostat=ios,status='old',form='formatted')
         if(ios.ne.0)then
            !call stderr('*notabs* failed to open:'//trim(array(i)))
            cycle ALLFILES
         endif
      endif
      ALLLINES: do                                         ! loop thru the file and call notabs(3f) on each line
         read(ii,"(a)",iostat=ios)in
         if(ios /= 0)then
            exit ALLLINES
         endif
         call notabs(in,out,iout)
         write(*,"(a)")out(:iout)
      enddo ALLLINES
      close(unit=20,iostat=ios)
   enddo ALLFILES
!===================================================================================================================================
!-----------------------------------------------------------------------------------------------------------------------------------
end program test_notabs
$ENDIF
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$IFDEF UFPP_TEST
$MESSAGE notabs(1) unit test
$SYSTEM mkdir -p tmp/

         Initialiase test database to indicate a test section was begun,
         in case failure occurs before the end of the test

$SYSTEM goodbad notabs start -section 1 -library libGPF -filename `pwd`/M_strings.HTML

         if command not in path exit
$SYSTEM inpath notabs

         executable notabs(1) is assumed in standard location create a
         test file without tabs or extraneous line endings. This should
         be what the answer is ...

$OUTPUT tmp/_notabs.txt
This is a test file for notabs
    This is a test file for notabs
        This is a test file for notabs                         This is a test file for notabs

                This is a test file for notab                        This is a test file for notabs
                        This is a test file for notabs
                                This is a test file for notabs
$OUTPUT

         Use unexpand(1) and unix2dos(1) to put tab characters and
         extraneous carriage returns into the test data

$SYSTEM unexpand -a  < tmp/_notabs.txt |unix2dos > tmp/_tabs.txt

         notabs(1) should be able to remove the tabs and carriage
         returns added

$SYSTEM notabs < tmp/_tabs.txt >tmp/_notabs_out.txt

        compare the output file to the expected output

$SYSTEM cmp tmp/_notabs.txt tmp/_notabs_out.txt && goodbad no-section 1 tabs good|| goodbad notabs bad -section 1

        clean up

$SYSTEM ls -ld tmp/_notabs.txt tmp/_tabs.txt tmp/_notabs_out.txt
$SYSTEM rm tmp/_notabs.txt tmp/_tabs.txt tmp/_notabs_out.txt
$ENDIF
$!==================================================================================================================================
$!()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()
$!==================================================================================================================================
