$ifdef TESTPRG90
$!----------------------------------------------------------------------------------------------------------------------------------
$!
$! create help text routine HELP_USAGE(3f) and source for man(1) page
$!
$DOCUMENT HELP -file _touch.1.man
NAME
       _touch(1f) - [FUNIX] change file access timestamps or create null file

SYNOPSIS
       touch FILE... [--help|--version|--verbose]

DESCRIPTION

       Make sure specified filenames exist (by creating them as empty
       files) and change file access time to current time.
$DOCUMENT END
$!----------------------------------------------------------------------------------------------------------------------------------
$!
$! create routine HELP_VERSION(3f)
$!
$DOCUMENT VERSION
PRODUCT:        GPF library utilities and examples
PROGRAM:        _touch(1)
DESCRIPTION:    change file access timestamp to current time, creating file is necessary
VERSION:        1.0, 20180217
AUTHOR:         John S. Urban
$DOCUMENT END
$!----------------------------------------------------------------------------------------------------------------------------------
$!
$! Program source
$!
program touch
use M_kracken, only : kracken,lget,sgets
implicit none
character(len=4096),allocatable :: filenames(:)
integer                         :: i
integer                         :: ios
integer                         :: lun
logical                         :: verbose
character(len=4096)             :: errmsg
logical                         :: ex,od
character(len=1)                :: char

! define command arguments, default values and crack command line
call kracken('touch','-version .f. -help .f. -verbose .f.') 
call help_usage(lget('touch_help'))                ! if -help option is present, display help text and exit
call help_version(lget('touch_version'))           ! if -version option is present, display version text and exit
verbose=lget('touch_verbose')
filenames=sgets('touch_oo')

do i=1,size(filenames)
   ! ex, od always become defined unless an error condition occurs.
   inquire(file=filenames(i), exist=ex, opened=od, iostat=ios)
   open(file=filenames(i),newunit=lun,iostat=ios,iomsg=errmsg)
   if(ios.ne.0)then
      write(*,*)'*touch* ERROR on '//trim(filenames(i))//':'//trim(errmsg)
   elseif(verbose)then
      if(.not.ex)then
         write(*,'(a)')trim(filenames(i))//' created'
      else
         read(lun,'(a)',iostat=ios,iomsg=errmsg)char ! make access attempt or date not updating
         write(*,*)'CHAR=',char
	 if(ios.ne.0)then
            write(*,*)'*touch* ERROR on '//trim(filenames(i))//':'//trim(errmsg)
	 else
            write(*,'(a)')trim(filenames(i))//' updated'
	 endif
      endif
   else
      read(lun,'(a)',iostat=ios,iomsg=errmsg)char ! make access attempt or date not updating
      write(*,*)'CHAR=',char
   endif
   close(unit=lun,iostat=ios)
enddo
end program touch
$!----------------------------------------------------------------------------------------------------------------------------------
$endif
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$ifdef UFPP_TEST
   This begins the section that will be processed by ufpp. Typically it is called by

      ufpp UFPP_TEST -system -i FILENAME

   if $SYSTEM commands are trusted

 UNIT TEST OF _touch

$SYSTEM mkdir -p tmp/
$SYSTEM goodbad _touch start -section 1

        Make sure test executable does not exist.
        Test executable should start with underscore and be unique or you could remove a command
$SYSTEM rm -f `which __touch 2>/dev/null||echo NOTTHERE`

        Build test program in standard location
$SYSTEM ufpp TESTPRG90 -i _touch.FF >tmp/__touch.F90
$SYSTEM ccall tmp/__touch.F90

        Execute test program

        See if new files are created
       
$SYSTEM rm -f __NOT1 __NOT2
$SYSTEM __touch __NOT1 __NOT2
$SYSTEM [ -f __NOT1 -a -f __NOT2 ] && goodbad _touch good -section 1|| goodbad _touch bad -section 1

        Remove test source
$SYSTEM rm tmp/__touch.F90 __NOT1 __NOT2
        Remove test executable
$SYSTEM rm -f `which __touch 2>/dev/null|| echo NOTTHERE`
$!==================================================================================================================================
$endif
