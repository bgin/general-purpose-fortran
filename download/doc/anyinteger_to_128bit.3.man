NAME

   anyinteger_to_128bit(3f) - [M_anyscalar] convert integer any kind to integer(kind=128)

SYNOPSIS

   elemental function anyinteger_to_128bit(intin) result(ii38)

    integer(kind=int128) function anyinteger_to_128bit(value)
    class(*),intent(in)     :: intin
    integer(kind=int8|int16|int32|int64|int128) :: value

DESCRIPTION

   This function uses polymorphism to allow arguments of different types
   generically. It is used to create other procedures that can take
   many scalar arguments as input options, equivalent to  passing the
   parameter VALUE as int(VALUE,0_int128).

OPTIONS

   VALUEIN  input argument of a procedure to convert to type REAL(KIND=128).
            May be of KIND kind=int8, kind=int16, kind=int32, kind=int64,
            kind=int128, kind=real32, kind=real64, kind=real128,
            or kind=real256
RESULTS
            The returned value is of kind REAL(KIND=REAL128)  and is
            the value of VALUIN converted to real(KIND=REAL128).
EXAMPLE
   Sample program

    program scalars
    use M_anyscalar,     only : int128
    use iso_fortran_env, only : int8, int16, int32, int64
    implicit none
       ! call same function with many scalar input types
       write(*,*)squarei(2_int8)
       write(*,*)squarei(2_int16)
       write(*,*)squarei(2_int32)
       write(*,*)squarei(2_int64)
       write(*,*)squarei(2_int128)
    contains

    function squarei(invalue)
    use M_anyscalar, only : anyinteger_to_128bit, int128
    implicit none
    class(*),intent(in)  :: invalue
    real                 :: invalue_local
    integer(kind=int128) :: squarei
       invalue_local=anyinteger_to_128bit(invalue)
       dvalue=invalue_local*invalue_local
    end function squarei

    end program scalars
