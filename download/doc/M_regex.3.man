NAME
     M_regex(3fm) - [M_regex] Fortran interface to POSIX 1003.2 regular expression library using ISO_C_BINDING.
SYNOPSIS
     regcomp(3f), regexec(3f), regerror(3f), regfree(3f)
     regmatch(3f), regsub(3f)

DESCRIPTION

   These routines interface with the C implementation of IEEE Std 1003.2 ( POSIX.2 ) RE (Regular
   Expressions).

   o The regcomp(3c) function compiles an RE written as a string into an internal form
   o regexec(3c) matches that internal form against a string and reports results
   o regerror(3c) transforms error codes from either into human-readable messages
   o and regfree(3c) frees any dynamically-allocated storage used by the internal form of an RE.

   The Fortran interface is composed of wrapper routines that call the
   C library, plus some extensions (ie. regmatch(3f), regsub(3f)). See the C documentation
   for further details about implementation, performance, and limitations.

   The following constructs are recognized in a ERE (Extended Regular Expression):

       .     Matches any character except newline.
       *     (postfix) Matches the preceding expression zero, one or several times
       +     (postfix) Matches the preceding expression one or several times
       ?     (postfix) Matches the preceding expression once or not at all
       [..]  Character set. Ranges are denoted with - , as in [a-z] .
             An initial ^ , as in [^0-9] , complements the set. To
             include a ] character in a set, make it the first character
             of the set. To include a - character in a set, make it
             the first or the last character of the set.

       ^        Matches at beginning of line: either at the beginning
                of the matched string, or just after a '\n' character.
       $        Matches at end of line: either at the end of the matched
                string, or just before a '\n' character.
       |        (infix) Alternative between two expressions.
       (..)     Grouping and naming of the enclosed expression.
       \1       The text matched by the first \(...\) expression (
                \2 for the second expression, and so on up to \9 ).
       \b       Matches word boundaries.
       \        Quotes special characters. The special characters are $^\.*+?[] .

DESCRIPTION

   Regular expressions ( REs ), as defined in IEEE Std 1003.2
   ( POSIX.2 ), come in two forms: modern REs (roughly those of
   egrep(1); 1003.2 calls these extended REs or ERE) and obsolete REs
   (roughly those of ed(1); 1003.2 basic REs or BRE). BRE mostly
   exist for backward compatibility in some old programs; they will be
   discussed at the end. IEEE Std 1003.2 ( POSIX.2 ) leaves some
   aspects of RE syntax and semantics open; decisions on
   these aspects mean that conforming implementations of IEEE Std 1003.2
   ( POSIX.2 ) may not be completely compatible.

   A (modern) RE is one or more non-empty branches, separated by |.
   It matches anything that matches one of the branches.

   A branch is one or more pieces, concatenated. It matches a match
   for the first, followed by a match for the second, etc.

   A piece is an atom possibly followed by a single * , + , ? ,
   or bound. An atom followed by * matches a sequence
   of 0 or more matches of the atom. An atom followed by + matches
   a sequence of 1 or more matches of the atom. An atom followed by ?
   matches a sequence of 0 or 1 matches of the atom.

   A bound is { followed by an unsigned decimal integer, possibly
   followed by , possibly followed by another unsigned decimal
   integer, always followed by } . The integers must lie between
   0 and RE_DUP_MAX (255 ) inclusive, and if there are two of them,
   the first may not exceed the second. An atom followed by a bound
   containing one integer i and no comma matches a sequence of exactly
   i matches of the atom. An atom followed by a bound containing one
   integer i and a comma matches a sequence of i or more matches of the
   atom. An atom followed by a bound containing two integers i and j
   matches a sequence of i through j (inclusive) matches of the atom.

   An atom is a regular expression enclosed in () (matching a match
   for the regular expression), an empty set of () (matching the null
   string) , a bracket expression (see below), . (matching any
   single character), ^ (matching the null string at the beginning
   of a line), $ (matching the null string at the end of a line), a
   \\ followed by one of the characters ^.[$()|*+?{\ (matching
   that character taken as an ordinary character), a \ followed
   by any other character (matching that character taken as an ordinary
   character, as if the \ had not been present ), or a single
   character with no other significance (matching that character). A {
   followed by a character other than a digit is an ordinary character,
   not the beginning of a bound . It is illegal to end an RE with
   \ .

   A bracket expression is a list of characters enclosed in []
   . It normally matches any single character from the list (but see
   below). If the list begins with ^ , it matches any single
   character (but see below) not from the rest of the list. If two
   characters in the list are separated by - , this is shorthand
   for the full range of characters between those two (inclusive) in the
   collating sequence, e.g. [0-9] in ASCII matches any decimal
   digit. It is illegal for two ranges to share an endpoint, e.g.
   a-c-e . Ranges are very collating-sequence-dependent, and portable
   programs should avoid relying on them.

   To include a literal ] in the list, make it the first character
   (following a possible ^ ). To include a literal - , make
   it the first or last character, or the second endpoint of a range. To
   use a literal - as the first endpoint of a range, enclose it in
   [. and .] to make it a collating element (see below). With
   the exception of these and some combinations using [ (see
   next paragraphs), all other special characters, including \ ,
   lose their special significance within a bracket expression.

   Within a bracket expression, a collating element (a character,
   a multi-character sequence that collates as if it were a single
   character, or a collating-sequence name for either) enclosed in
   [. and .] stands for the sequence of characters of that
   collating element. The sequence is a single element of the bracket
   expression's list. A bracket expression containing a multi-character
   collating element can thus match more than one character, e.g. if the
   collating sequence includes a ch collating element, then the RE
   [[.ch.]]*c matches the first five characters of chchcc .

   Within a bracket expression, a collating element enclosed in [=
   and =] is an equivalence class, standing for the sequences of
   characters of all collating elements equivalent to that one, including
   itself. (If there are no other equivalent collating elements, the
   treatment is as if the enclosing delimiters were [. and .]
   .) For example, if x and y are the members of an equivalence
   class, then [[=x=]] , [[=y=]] , and [xy] are all
   synonymous. An equivalence class may not be an endpoint of a range.

   Within a bracket expression, the name of a character class enclosed in
   [: and :] stands for the list of all characters belonging
   to that class. Standard character class names are:

         alnum    digit    punct
         alpha    graph    space
         blank    lower    upper
         cntrl    print    xdigit

   These stand for the character classes defined in ctype(3). A locale
   may provide others. A character class may not be used as an endpoint
   of a range.

   A bracketed expression like [[:class:]] can be used to match a single
   character that belongs to a character class. The reverse, matching
   any character that does not belong to a specific class, the negation
   operator of bracket expressions may be used: [^[:class:]] .

   There are two special cases of bracket expressions: the bracket
   expressions [[:<:]] and [[:>:]] match the null string at the beginning
   and end of a word respectively. A word is defined as a sequence of word
   characters which is neither preceded nor followed by word characters. A
   word character is an alnum character (as defined by ctype(3)) or an
   underscore. This is an extension, compatible with but not specified
   by IEEE Std 1003.2 ( POSIX.2 ), and should be used with caution in
   software intended to be portable to other systems.

   In the event that an RE could match more than one substring of a given
   string, the RE matches the one starting earliest in the string. If the RE
   could match more than one substring starting at that point, it matches
   the longest. Subexpressions also match the longest possible substrings,
   subject to the constraint that the whole match be as long as possible,
   with subexpressions starting earlier in the RE taking priority over
   ones starting later. Note that higher-level subexpressions thus take
   priority over their lower-level component subexpressions.

   Match lengths are measured in characters, not collating elements. A
   null string is considered longer than no match at all. For example, bb*
   matches the three middle characters of abbbc , (wee|week)(knights|nights)
   matches all ten characters of weeknights, when (.*).* is matched against
   abc the parenthesized subexpression matches all three characters, and
   when (a*)* is matched against bc both the whole RE and the parenthesized
   subexpression match the null string.

   If case-independent matching is specified, the effect is much as if all
   case distinctions had vanished from the alphabet. When an alphabetic
   that exists in multiple cases appears as an ordinary character outside
   a bracket expression, it is effectively transformed into a bracket
   expression containing both cases, e.g. x becomes [xX] . When it appears
   inside a bracket expression, all case counterparts of it are added
   to the bracket expression, so that (e.g.) [x] becomes [xX] and [^x]
   becomes [^xX] .

   No particular limit is imposed on the length of REs . Programs intended
   to be portable should not employ REs longer than 256 bytes, as an
   implementation can refuse to accept such REs and remain POSIX-compliant.

   Obsolete ( basic ) regular expressions differ in several respects. | is
   an ordinary character and there is no equivalent for its functionality. +
   and ? are ordinary characters, and their functionality can be expressed
   using bounds ( {1,} or {0,1} respectively). Also note that x+ in modern,
   REs is equivalent to xx* . The delimiters for bounds are \{ and \}
   with { and } by themselves ordinary characters. The parentheses for
   nested subexpressions are \( and \) , with ( and ) by themselves ordinary
   characters. ^ is an ordinary character except at the beginning of the
   RE or the beginning of a parenthesized subexpression, $ is an ordinary
   character except at the end of the RE or the end of a parenthesized
   subexpression, and * is an ordinary character if it appears at the
   beginning of the RE or the beginning of a parenthesized subexpression
   (after a possible leading ^ ). Finally, there is one new type of atom, a
   back reference: \ followed by a non-zero decimal digit d matches the same
   sequence of characters matched by the dth parenthesized subexpression
   (numbering subexpressions by the positions of their opening parentheses,
   left to right), so that (e.g.) \([bc]\)\1 matches bb or cc but not bc .

C WRAPPERS

   Regex is defined as an API using C headers. It does not define the
   exact value of flag tokens, just the names. It also uses an opaque
   data structure and a declared numeric type for the match array.
   Therefore, the code must either be generated for each target
   platform, or it must use wrapper functions written in C.

FORTRAN WRAPPERS

   Fortran wrapper functions are also required to present a normal
   Fortran API, and to not require C conversions by the caller.

   The interface here is not strictly correct, because it does not
   explicitly convert Fortran strings to the C character kind.
   Fortran only supports conversion of string kinds by assignment,
   or by a rather slow internal WRITE. For now, the easiest approach
   is to assume that C and Fortran default character kinds are the
   same. This is generally true, but UTF-8 strings are likely to
   cause problems.

GENERAL

   By default, the NUL-terminated string pointed to by string is
   considered to be the text of an entire line, minus any terminating
   newline. The eflags argument is the bitwise OR of zero or more of
   the following flags:

   REG_NOTBOL    The first character of the string is not the beginning
                 of a line, so the ^ anchor should not match before
                 it. This does not affect the behavior of newlines
                 under REG_NEWLINE.

   REG_NOTEOL    The NUL terminating the string does not end a line,
                 so the $ anchor should not match before it. This does
                 not affect the behavior of newlines under REG_NEWLINE.

   REG_STARTEND  The string is considered to start at string +
                 pmatch[0].rm_so and to have a terminating NUL located at string
                 + pmatch[0].rm_eo (there need not actually be a NUL
                 at that location), regardless of the value of nmatch.
                 See below for the definition of pmatch and nmatch. This
                 is an extension, compatible with but not specified by
                 IEEE Std 1003.2 ( POSIX.2 ), and should be used with
                 caution in software intended to be portable to other
                 systems. Note that a non-zero rm_so does not imply
                 REG_NOTBOL; REG_STARTEND affects only the location of
                 the string, not how it is matched.

   If REG_NOSUB was specified in the compilation of the RE, or if nmatch
   is 0, regexec() ignores the pmatch argument (but see below for the
   case where REG_STARTEND is specified). Otherwise, pmatch points to
   an array of nmatch structures of type regmatch_t. Such a structure
   has at least the members rm_so and rm_eo, both of type regoff_t (a
   signed arithmetic type at least as large as an off_t and a ssize_t),
   containing respectively the offset of the first character of a
   substring and the offset of the first character after the end of
   the substring. Offsets are measured from the beginning of the string
   argument given to regexec(). An empty substring is denoted by equal
   offsets, both indicating the character following the empty substring.

   The 0th member of the pmatch array is filled in to indicate what
   substring of string was matched by the entire RE. Remaining members
   report what substring was matched by parenthesized subexpressions
   within the RE; member i reports subexpression i, with subexpressions
   counted (starting at 1) by the order of their opening parentheses in
   the RE, left to right. Unused entries in the array (corresponding
   either to subexpressions that did not participate in the match at
   all, or to subexpressions that do not exist in the RE (that is, i >
   preg->re_nsub)) have both rm_so and rm_eo set to -1. If a subexpression
   participated in the match several times, the reported substring
   is the last one it matched. (Note, as an example in particular ,
   that when the RE (b*)+ matches bbb , the parenthesized
   subexpression matches each of the three b's and then an infinite
   number of empty strings following the last b , so the reported
   substring is one of the empties.)

   If REG_STARTEND is specified, pmatch must point to at least one
   regmatch_t (even if nmatch is 0 or REG_NOSUB was specified), to hold
   the input offsets for REG_STARTEND. Use for output is still entirely
   controlled by nmatch; if nmatch is 0 or REG_NOSUB was specified,
   the value of pmatch[0] will not be changed by a successful regexec().

   The regerror() function maps a non-zero errcode from either
   regcomp() or regexec() to a human-readable, printable message.
   If preg is non-NULL, the error code should have arisen from use of
   the regex_t pointed to by preg, and if the error code came from
   regcomp(), it should have been the result from the most recent
   regcomp() using that regex_t. The (regerror() may be able to
   supply a more detailed message using information from the regex_t.)
   The regerror() function places the NUL-terminated message into the
   buffer pointed to by errbuf, limiting the length (including the NUL)
   to at most errbuf_size bytes. If the whole message will not fit,
   as much of it as will fit before the terminating NUL is supplied.
   In any case, the returned value is the size of buffer needed to hold
   the whole message (including terminating NUL). If errbuf_size is 0,
   errbuf is ignored but the return value is still correct.

   The regfree() function frees any dynamically-allocated storage
   associated with the compiled RE pointed to by preg. The remaining
   regex_t is no longer a valid compiled RE and the effect of supplying
   it to regexec() or regerror() is undefined.

   None of these functions references global variables except for
   tables of constants; all are safe for use from multiple threads if
   the arguments are safe.

IMPLEMENTATION CHOICES

   RE_DUP_MAX, the limit on repetition counts in bounded repetitions,
   is 255.

   A repetition operator ( ? , * , + , or bounds) cannot
   follow another repetition operator. A repetition operator cannot
   begin an expression or subexpression or follow ^ or | .

   | cannot appear first or last in a (sub)expression or after
   another | , i.e., an operand of | cannot be an empty sub
   expression. An empty parenthesized subexpression, () , is legal
   and matches an empty (sub)string. An empty string is not a legal RE.

   A { followed by a digit is considered the beginning of bounds for
   a bounded repetition, which must then follow the syntax for bounds. A
   { not followed by a digit is considered an ordinary character.

   ^ and $ beginning and ending subexpressions in obsolete
   ( basic ) REs are anchors, not ordinary characters.

SEE ALSO

   Regular Expression Notation, IEEE Std, 1003.2, section 2.8.

   grep(1), re_format(7), regex(3)

   These routines implement IEEE Std 1003.2 ("POSIX.2") regular expressions ("RE"s); see re_format(7).

   IEEE Std 1003.2 (POSIX.2), sections 2.8 (Regular Expression Notation) and B.5 (C Binding for Regular Expression Matching).

    regcomp (3p)  - regular expression matching
    regex (3)     - regular-expression library
    regex (7)     - POSIX 1003.2 regular expressions
    regex.h (0p)  - regular expression matching types
    regexp (n)    - Match a regular expression against a string
    regsub (n)    - Perform substitutions based on regular expression pattern matching


