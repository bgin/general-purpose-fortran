NAME
   M_overload(3fm) - [M_overload] overloads of standard operators and intrinsic procedures
SYNOPSIS
   ==,/=   Allow the syntax "L1 == L2"  and "L1 /= L2" where L1 and L2 are
           type LOGICAL as an alternative to the standard expressions
           "L1 .EQV. L2" and "L1 .NEQV. L2".

   int(), real(), dble()  allow strings to be converted to numeric values
                          using the standard intrinsic names
DESCRIPTION
  Operator and function overloads have a wide range of applications from
  allowing existing Fortran routines to be used with almost no source-code
  changes to produce versions using arbitrary precision or cumulative error
  bounds on floating-point calculations to adding intuitive syntax for
  standard Fortran operations.

EXAMPLES
  Sample usage:

   program demo_M_overload
   use M_compare_float_numbers, only : operator(.EqualTo.)

   use M_overload, only : int          ! allow strings to be converted to integers
   use M_overload, only : real,dble    ! allow strings to be converted to floating point
   use M_overload, only : operator(==) ! use == like .eqv.
   use M_overload, only : operator(/=) ! use /= like .neqv.

   if(int('1234')               .eq.1234)                      write(*,*)'int("STRING") works '
   if(real('1234.56789')        .EqualTo.1234.56789)           write(*,*)'real("STRING") works '
   if(dble('1234.5678901234567').EqualTo.1234.5678901234567d0) write(*,*)'dble("STRING") works '
   if (.true. == .true. )  write(*,*)'== works like .eqv. for LOGICAL values'
   if (.true. /= .false. ) write(*,*)'/= works like .neqv. for LOGICAL values'

   end program demo_M_overload

  Expected output:

    int("STRING") works
    real("STRING") works
    dble("STRING") works
    == works like .eqv. for LOGICAL values
    /= works like .neqv. for LOGICAL values

